{"ID":"32","language":"python","title":"Convert HTML to PDF with the PDFcrowd API","content":"Convert HTML to PDF with the PDFcrowd API\n\n   import pdfcrowd\n\n    try:\n     # create an API client instance\n\n     # Dummy credentials used; to actually run the program, enter your own.\n           client = pdfcrowd.Client(\"user_name\", \"api_key\")\n           client.setAuthor('author_name')\n\n   # Dummy credentials used; to actually run the program, enter your own.\n         client.setUserPassword('user_password')\n\n    # Convert a web page and store the generated PDF in a file.\n\n        pdf = client.convertURI('http://www.dancingbison.com')\n        with open('dancingbison.pdf', 'wb') as output_file:\n        output_file.write(pdf)\n \n       # Convert a web page and store the generated PDF in a file.\n        pdf = client.convertURI('http://jugad2.blogspot.in/p/about-vasudev-ram.html')\n        with open('jugad2-about-vasudevram.pdf', 'wb') as output_file:\n        output_file.write(pdf)\n\n    # convert an HTML string and save the result to a file\n    output_file = open('html.pdf', 'wb')\n    html = \"My Small HTML File\"\n    client.convertHtml(html, output_file)\n    output_file.close()\n\n    except pdfcrowd.Error, why:\n    print 'Failed:', why\n"}
{"ID":"33","language":"python","title":"Draw Text To Image","content":"Draw Text To Image\n\n   # Draw (Bitmap Font) Text to Image\n      from PIL import Image, ImageDraw, ImageFont\n\n   def reverseColor(r, g, b):\n    return (255 - r, 255 - g, 255 - b)\n   def grayscaleColor(r, g, b):\n    a = (r + g + b) / 3\n    return (a, a, a)\n\n   text = \"Hello World!\"\n  # textColor = (255, 255, 0) # RGB Yellow\n  # textBackgroundColor = (255, 0, 0) # RGB Red\n  textX = 400 # text width in pixels\n  textY = 100 # text height in pixels\n  textTopLeftX = 0\n  textTopLeftY = 0\n\n   # create new image\n   # imgx = 800 # image width in pixels\n   # imgy = 600 # image height in pixels\n   # image = Image.new(\"RGB\", (imgx, imgy))\n\n   # load image\n   image = Image.open(\"input.png\")\n   (imgx, imgy) = image.size\n   # image = image.resize((imgx, imgy), Image.BICUBIC)\n\n   font = ImageFont.load_default() # load default bitmap font\n   (width, height) = font.getsize(text)\n   textImage = font.getmask(text)\n   pixels = image.load()\n   for y in range(imgy):\n    by = int(height * (y - textTopLeftY) / textY + 0.5)\n    if by &gt;= 0 and by &lt; height:\n        for x in range(imgx):\n            bx = int(width * (x - textTopLeftX) / textX + 0.5)\n            if bx &gt;= 0 and bx &lt; width:\n                if textImage.getpixel((bx, by)) == 0: # text background\n                    # pass # transparent background\n                    # pixels[x, y] = textBackgroundColor\n                    (r, g, b, a) = pixels[x, y]\n                    pixels[x, y] = grayscaleColor(r, g, b)\n                else: # text foreground\n                    # pixels[x, y] = textColor\n                      (r, g, b, a) = pixels[x, y]\n                    pixels[x, y] = reverseColor(r, g, b)\n   image.save(\"output.png\", \"PNG\")\n"}
{"ID":"34","language":"python","title":"Convert a Python AST into an XML file","content":"Convert a Python AST into an XML file\n\n   import ast, re, sys\n     from xml.dom import minidom\n\n   try:\n    from xml.etree import cElementTree as etree\n   except:\n\n    try:\n        from lxml import etree\n    except:\n        from xml.etree import ElementTree as etree\n\n   def prettify(xml_string):\n      reparsed = minidom.parseString(xml_string)\n      return reparsed.toprettyxml(indent=\"  \")\n\n   class ast2xml(ast.NodeVisitor):\n      def __init__(self):\n        super(ast.NodeVisitor, self).__init__()\n        self.path = []\n        self.root = etree.Element('ast')\n        self.celement = self.root\n    def convert(self, tree):\n        self.visit(tree)\n        return etree.tostring(self.root)\n    def generic_visit(self, node):\n        node_name = type(node).__name__\n        self.path.append(node_name)\n        ocelement = self.celement\n        self.celement = etree.SubElement(self.celement, node_name)\n        for item in node.__dict__:\n            if isinstance(getattr(node, item), ast.AST):\n                self.generic_visit(getattr(node, item))\n            elif isinstance(getattr(node, item), list):\n               ocel2 = self.celement\n                self.celement = etree.SubElement(self.celement, item)\n                [self.generic_visit(childnode) for childnode in getattr(node, item) if isinstance(childnode, (ast.AST, list))]\n                self.celement = ocel2\n            else:\n                self.celement.attrib.update({item: str(getattr(node, item))})\n        self.path.pop()\n        self.celement = ocelement\n\n    def main(fpath):\n      with open(fpath, 'r') as f:\n        tree = ast.parse(f.read())\n        res = ast2xml().convert(tree)\n        print prettify(res)\n\n    if __name__ == '__main__':\n    main(sys.argv[1])\n"}
{"ID":"35","language":"python","title":"Image Converter","content":"Image Converter\n\n   # Image Converter\n   # Supported Formats:\n   # http://effbot.org/imagingbook/formats.htm\n\n     from PIL import Image\n     import sys, os\n\n    if len(sys.argv) != 3:\n    print \"USAGE:\"\n    print \"[python] ImageConverter.py InputImageFilePath OutputImageFilePath\"\n    print \"Use quotes if file paths/names contain spaces!\"\n    os._exit(1) # sys.exit()\n\n    InputImageFilePath = sys.argv[1]\n    OutputImageFilePath = sys.argv[2]\n    imageFormat = ((os.path.splitext(OutputImageFilePath)[1])[1 : ]).upper()\n\n    if imageFormat == \"JPG\": imageFormat = \"JPEG\"\n    if imageFormat == \"TIF\": imageFormat = \"TIFF\"\n    image = Image.open(InputImageFilePath)\n    image.save(OutputImageFilePath, imageFormat)\n"}
{"ID":"36","language":"python","title":"IConvert JSON to PDF with Python and xtopdf","content":"Convert JSON to PDF with Python and xtopdf\n\n   import sys\n   import json\n   from PDFWriter import PDFWriter\n\n    def error_exit(message):\n      sys.stderr.write(message)\n      sys.exit(1)\n\n    def JSONtoPDF(json_data):\n    # Get the data values from the JSON string json_data.\n\n    try:\n        data = json.loads(json_data)\n        pdf_filename = data['pdf_filename']\n        font_name = data['font_name']\n        font_size = data['font_size']\n        header = data['header']\n        footer = data['footer']\n        lines = data['lines']\n    except Exception as e:\n        error_exit(\"Invalid JSON data: {}\".format(e.message))\n    # Generate the PDF using the data values.\n    try:\n        with PDFWriter(pdf_filename) as pw:\n            pw.setFont(font_name, font_size)\n            pw.setHeader(header)\n            pw.setFooter(footer)\n            for line in lines:\n                pw.writeLine(line)\n\n     except IOError as ioe:\n     error_exit(\"IOError while generating PDF file: {}\".format(ioe.message))\n     except Exception as e:\n     error_exit(\"Error while generating PDF file: {}\".format(e.message))\n\n     def testJSONtoPDF():\n       fil = open('the-man-in-the-arena.txt')\n       lis = fil.readlines()\n    data = { \\n        'pdf_filename': 'the-man-in-the-arena.pdf', \\n        'font_name': 'Courier', \\n        'font_size': 12, \\n        'header': 'The Man in the Arena', \\n  'footer': 'Generated by xtopdf - http://google.com/search?q=xtopdf', \\n        'lines': lis \\n        }\n\n    json_data = json.dumps(data)\n    JSONtoPDF(json_data)\n    \n     def main():\n       testJSONtoPDF() \n\n   if __name__ == '__main__':\n    main()\n"}
{"ID":"37","language":"python","title":"Find Duplicate Files","content":"Find Duplicate Files\n\   import sys\n   import os\n   import glob\n   import hashlib\n\n     numArgs = len(sys.argv) # of command-line arguments\n     if numArgs &lt; 2 or numArgs &gt; 3:\n       print \"USAGE:\"\n       print \"[python] FindDuplicateFiles.py FilePath [FilePath2]\"\n       print \"FilePath2 is optional.\"\n       print \"If file path(s) have spaces then add quotes around.\"\n       print \"File path(s) must include wildcards in the end\"\n       print \"like ...\*.*\"\n    os._exit(1)\n\n   if numArgs &gt; 1:\n      filePath1 = sys.argv[1]\n      filePath2 = filePath1   if numArgs &gt; 2:\n      filePath2 = sys.argv[2]\n\     fileList1 = glob.glob(filePath1)\     fileList2 = glob.glob(filePath2)\\   fileSizeList1 = []\     for fn1 in fileList1:\        fileSizeList1.append(os.path.getsize(fn1))\\n   fileSizeList2 = []\n    for fn2 in fileList2:\n       fileSizeList2.append(os.path.getsize(fn2))\n\n   # Find groups of files which have same size\n    fileSizeGroups = dict()\n    for i in range(len(fileList1)):\n    if fileSizeList1[i] not in fileSizeGroups:\n        fileSizeGroups[fileSizeList1[i]] = [fileList1[i]]\n    elif fileList1[i] not in fileSizeGroups[fileSizeList1[i]]:\n        fileSizeGroups[fileSizeList1[i]].append(fileList1[i])\n\n    for i in range(len(fileList2)):\n    if fileSizeList2[i] not in fileSizeGroups:\n        fileSizeGroups[fileSizeList2[i]] = [fileList2[i]]\n    elif fileList2[i] not in fileSizeGroups[fileSizeList2[i]]:\n        fileSizeGroups[fileSizeList2[i]].append(fileList2[i])\n \n      # Find groups of files which have same size and same hash\n     fileHashGroups = dict()\n   for fileSize in fileSizeGroups.keys():\n    if len(fileSizeGroups[fileSize]) &gt; 1:\n        for fn in fileSizeGroups[fileSize]:\n            fileHash = hashlib.sha256(open(fn, 'rb').read()).hexdigest()\n            if fileHash not in fileHashGroups:\n                fileHashGroups[fileHash] = [fn]\n            elif fn not in fileHashGroups[fileHash]:\n                fileHashGroups[fileHash].append(fn)\n\n   # Output groups of files which have same size and same hash\n    for fileHash in fileHashGroups.keys():\n    if len(fileHashGroups[fileHash]) &gt; 1:\n        for fn in fileHashGroups[fileHash]:\n            print fn\n        print\n"}
{"ID":"38","language":"python","title":"Validate product","content":"Validate product\n\nimport re\nprint \" Write  product  name  : \"\nnume_produs = raw_input()print \" Write product  price : \"\ncost_produs = input()\nif (nume_produs == re.sub('[^a-z]',\"\",nume_produs)):\n    print ('%s %d'%(nume_produs,cost_produs))\nelse:\n    print \"Error ! You  must tape letters\"\ninput()\n"}
{"ID":"39","language":"python","title":"create a unique session key","content":""create a unique session key\n\ndef generate_key(self, uid):\n    import md5, os, base64, random\n    m = md5.new()\n    m.update(os.urandom(random.randint(15,25)))\n    m.update(uid)\n    return base64.standard_b64encode(m.digest())\n}
{"ID":"40","language":"python","title":"Convert doc and docx files to pdf","content":"Convert doc and docx files to pdf\n\nfrom os import chdir, getcwd, listdir, path\nfrom time import strftime\nfrom win32com import client\n\ndef count_files(filetype):\n    ''' (str) -&gt; int\n    Returns the number of files given a specified file type.\n    &gt;&gt;&gt; count_files(\".docx\")\n11\n    '''\n    count_files = 0\n    for files in listdir(folder):\n        if files.endswith(filetype):\n            count_files += 1\n    return count_files\n# Function \"check_path\" is used to check whether the path the user\nprovided does\n# actually exist. The user is prompted for a path until the existence of \nthe\n# provided path has been verified.\n\ndef check_path(prompt):\n    ''' (str) -&gt; str\n    Verifies if the provided absolute path does exist.\n    '''\n    abs_path = raw_input(prompt)\n    while path.exists(abs_path) != True:\n        print \"\nThe specified path does not exist.\n\"\n        abs_path = raw_input(prompt)\n    return abs_path \n    \n   print \"\n\"\n\nfolder = check_path(\"Provide absolute path for the folder: \")\n\n# Change the directory.\n\nchdir(folder)\n\n# Count the number of docx and doc files in the specified folder.\n\nnum_docx = count_files(\".docx\")\nnum_doc = count_files(\".doc\")\n\n# Check if the number of docx or doc files is equal to 0 (= there are \nno files\n# to convert) and if so stop executing the script.\n \nif num_docx + num_doc == 0:\n    print \"\nThe specified folder does not contain docx or docs files.\n\"\n    print strftime(\"%H:%M:%S\"), \"There are no files to convert. BYE, BYE!.\"\n    exit()\nelse:\n    print \"\nNumber of doc and docx files: \", num_docx + num_doc, \"\n\"\n    print strftime(\"%H:%M:%S\"), \"Starting to convert files ...\n\"\n\n# Try to open win32com instance. If unsuccessful return an error message.\n\ntry:\n    word = client.DispatchEx(\"Word.Application\")\n    for files in listdir(getcwd()):\n        if files.endswith(\".docx\"):\n            new_name = files.replace(\".docx\", r\".pdf\")\n            in_file = path.abspath(folder + \"\\\" + files)\n            new_file = path.abspath(folder + \"\\\" + new_name)\n            doc = word.Documents.Open(in_file)\n            print strftime(\"%H:%M:%S\"), \" docx -&gt; pdf \", path.relpath(new_file)\n            doc.SaveAs(new_file, FileFormat = 17)\n            doc.Close()\n        if files.endswith(\".doc\"):\n            new_name = files.replace(\".doc\", r\".pdf\")\n            in_file = path.abspath(folder + \"\\\" + files)\n            new_file = path.abspath(folder + \"\\\" + new_name)\n            doc = word.Documents.Open(in_file)\n  print strftime(\"%H:%M:%S\"), \" doc  -&gt; pdf \", path.relpath(new_file)\n            doc.SaveAs(new_file, FileFormat = 17)\n            doc.Close()\nexcept Exception, e:\n    print e\nfinally:\n    word.Quit()\n\nprint \"\n\", strftime(\"%H:%M:%S\"), \"Finished converting files.\" \n   \n# Count the number of pdf files.\n\nnum_pdf = count_files(\".pdf\") \n \nprint \"\nNumber of pdf files: \", num_pdf\n\n# Check if the number of docx and doc file is equal to the number of files.\n\nif num_docx + num_doc == num_pdf:\n    print \"\nNumber of doc and docx files is equal to number of pdf files.\"\nelse:\n    print \"\nNumber of doc and docx files is not equal to number of pdf files.\"\n"}
{"ID":"41","language":"python","title":"search file extensions in directory","content":"search file extensions in directory\n\nimport sys\nimport os\n\npath = os.path.abspath('.') # default is current dir\nif len(sys.argv) == 2:\n    path = sys.argv[1]\nexts = []\nfor root, dirs, files in os.walk(os.path.expanduser(path)):\n    for fn in files:\n        bn, ext = os.path.splitext(fn)\n        if not ext in exts:\n            exts.append(ext)\n            if ext:\n                print ext\n"}
{"ID":"42","language":"python","title":"check svn number for all modules","content":"check svn number for all modules\n\nimport os\nimport re\nfrom urllib2 import urlopen\n\nbase_url_qacandrot = \"https://qacand.sflab.ondemand.com/sf- \nversion.properties\"\nbase_url_qapatch = \"http://qapatch.successfactors.com/sf-\nversion.properties\"\nbase_url_qacand = \"http://qacand.successfactors.com/sf-version.properties\"\n\n# get test environment\nprint \"Before use this tool, please make sure you connect to VPN!\"\nenv = raw_input(\"Please enter your test env: qacand, qacandrot or qapatch\n (Non case sensitive): \")\n\nif env.strip().lower() == \"qacand\":\n    html_resource = urlopen(base_url_qacand).read()\nelif env.strip().lower() == \"qapatch\":\n    html_resource = urlopen(base_url_qapatch).read()\nelif html_resource == \"qacandrot\":\n    html_resource = urlopen(base_url_qacandrot).read()\n\nmodule_svn_map = {}\n\npattern = \"(.*?)-(.*?)-(.*?)sion=(\d+\n)\"\np = re.compile(pattern)\n\nfor strofmodule in html_resource.split():\n    if re.match(pattern, strofmodule):\n        results = re.findall(pattern, strofmodule)\n        module = results[0][1]\n        svn_number = results[0][3]\n        module_svn_map[module] = svn_number\n        \build_num_pattern = \"com.successfactors.sf-packages.version=\"\build_num_len = html_resource.index(build_num_pattern) +\n len(build_num_pattern)\build_version = html_resource[build_num_len:]\\print \"build version is \" + build_version, \"please make sure it is same \as that on \" + env.strip().lower() + \".\"\\while 1:\    build_by_module = raw_input(\"Is your module build by module: (y or \n, Non case sensitive) \")\\    if build_by_module.strip().lower() == \"n\":\        your_module = \"V4\"\        your_svn_number = raw_input(\"Please enter your svn number (6\n digit): \")\        if int(your_svn_number) &lt;= int(module_svn_map[your_module]):\   print \"Your svn number is included in current build on \" +\n env.strip().lower() + \".\"\        else:\            print \"Your svn number is NOT included on \" +env.strip().lower() +\n \".\"\n        os.system(\"pause\")\n        elif build_by_module.strip().lower() == \"y\":\n        print \"Please make sure your input is exactly same as one of module\n above!\"\n        your_module = raw_input(\"Please enter your module name: \")\n        your_svn_number = raw_input(\"Please enter your svn number (6\n digit): \")\n        if your_module.strip().lower() in module_svn_map.keys():\n            if int(your_svn_number) &lt;= int(module_svn_map[your_module]):\n                print \"Your svn number is included in current build on \" +\n env.strip().lower() + \".\"\n            else:\n       print \"Your svn number is NOT included on \" + env.strip().lower() +\n \".\"\n        os.system(\"pause\")\n"}
{"ID":"43","language":"python","title":"Send messages between computers","content":"Send messages between computers\n\n# Save as server.py \n# Message Receiver\nimport os\nfrom socket import *\nhost = \"\"\nport = 13000\nbuf = 1024\naddr = (host, port)\nUDPSock = socket(AF_INET, SOCK_DGRAM)\nUDPSock.bind(addr)\nprint \"Waiting to receive messages...\"\nwhile True:\n    (data, addr) = UDPSock.recvfrom(buf)\n    print \"Received message: \" + data\n    if data == \"exit\":\n        break\nUDPSock.close()\nos._exit(0)\n\n# Save as client.py \n# Message Sender\nimport os\nfrom socket import *\nhost = \"127.0.0.1\" # set to IP address of target computer\nport = 13000\naddr = (host, port)\nUDPSock = socket(AF_INET, SOCK_DGRAM)\nwhile True:\n    data = raw_input(\"Enter message to send or type 'exit': \")\n    UDPSock.sendto(data, addr)\n    if data == \"exit\":\n        break\nUDPSock.close()\nos._exit(0)\n"}
{"ID":"44","language":"python","title":"PDFWriter with context manager support","content":"PDFWriter with context manager support\n\nfrom PDFWriter import PDFWriter\n\nwith PDFWriter(\"test_pdfwriter.pdf\") as pw:\n\n    pw.setFont(\"Courier\", 12)\n    pw.setHeader(\"Input: test_pdfwriter.py Output: test_pdfwriter.pdf\")\n    pw.setFooter(\"Generated by xtopdf: http://bit.ly/xtopdf\")\n\n    with open(\"test_pdfwriter.py\") as in_fil:\n        for lin in in_fil:\n            pw.writeLine(lin)\n"}
{"ID":"45","language":"python","title":"List MySql databases in a Gtk","content":"List MySql databases in a Gtk\n\nimport MySQLdb\nimport os\n\nclass MyWindow(Gtk.Window):\n    \n    def __init__(self):\n\n        Gtk.Window.__init__(self, title='My Window Title')\n        self.connect('delete-event', Gtk.main_quit) \n               \n        store = Gtk.ListStore(str, str, str, str)\n        self.populate_store(store)\n        \n        self.treeview = Gtk.TreeView(model=store)\n\n        renderer = Gtk.CellRendererText()\n        \n        column_catalog = Gtk.TreeViewColumn('Catalog Name', renderer,\n text=0)\n        column_catalog.set_sort_column_id(0)    \n            self.treeview.append_column(column_catalog)\n   \n             column_dbname = Gtk.TreeViewColumn('Database Name', renderer,\n \ntext=1)\n        column_dbname.set_sort_column_id(1)\n        self.treeview.append_column(column_dbname)\n        \n        column_charset = Gtk.TreeViewColumn('Character Set', renderer,\n text=2)\n        column_charset.set_sort_column_id(2)\n        self.treeview.append_column(column_charset)\n        \n        column_collation = Gtk.TreeViewColumn('Collation', renderer, text=3)\n        column_collation.set_sort_column_id(3)\n        self.treeview.append_column(column_collation)\n        \n        scrolled_window = Gtk.ScrolledWindow()\n        scrolled_window.set_policy(\n            Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)\n        scrolled_window.add(self.treeview)\n        scrolled_window.set_min_content_height(200)\n\n        self.add(scrolled_window)\n        self.show_all()\n\n    # Add data to ListStore\n    def populate_store(self, store):\n        \n        try:\n            connection = None\n            connection = MySQLdb.connect('localhost', 'annon', 'pass')\n            cursor = connection.cursor()\n cursor.execute(\"Select * From `INFORMATION_SCHEMA`.`SCHEMATA`\")\n            rows = cursor.fetchall()\n        \n            for row in rows:\n                store.append([row[0], row[1], row[2], row[3]])\n         \n               except MySQLdb.Error, e:\n            store.append([str(e.args[0]), e.args[1], '', ''])\n  \n                  finally:\n            if connection != None:\n                connection.close()\n\n              win = MyWindow()\nGtk.main()\n"}
{"ID":"46","language":"python","title":"Circle Inversion Fractals","content":"Circle Inversion Fractals\n\nimport math\nimport random\nfrom PIL import Image\nimgx = 512; imgy = 512\nimage = Image.new(\"RGB\", (imgx, imgy))\npixels = image.load()\nn = random.randint(3, 6) # of main circles\na = math.pi * 2.0 / n\nr = math.sin(a) / math.sin((math.pi - a) / 2.0) / 2.0 # r of main circles\nh = math.sqrt(1.0 - r * r)\nxa = -h; xb = h; ya = -h; yb = h # viewing area\ncx = [0.0]; cy = [0.0]; cr = [1.0 - r] # center circle\nfor i in range(n): # add main circles\n    cx.append(math.cos(a * i))\n    cy.append(math.sin(a * i))\n    cr.append(r)\nmaxIt = 100000 # of iterations\nx = -2.0; y = -2.0 # initial point (outside of the circles)\nfor i in range(maxIt):\n    k = random.randint(0, n) # selected circle for inversion\n    dx = x - cx[k]; dy = y - cy[k]\n    d = math.hypot(dx, dy)\n    dx = dx / d; dy = dy / d\n    dnew = cr[k] ** 2.0 / d\n    x = dnew * dx + cx[k]\n    y = dnew * dy + cy[k]\n    kx = int((imgx - 1) * (x - xa) / (xb - xa))\n    ky = int((imgy - 1) * (y - ya) / (yb - ya))\n    try: pixels[kx, ky] = (255, 255, 255)\n    except: pass\nimage.save(\"CircleInversionFractal_\" + str(n) + \".png\", \"PNG\")\n"}
{"ID":"47","language":"python","title":"Calculating e using Continued Fraction","content":"Calculating e using Continued Fraction\n\nimport math\nn = 18 # number of iterations\nx = 0.0\nfor i in range(n, 0, -1):\n\n    if i % 3 == 1:\n        j = int(i / 3) * 2\n    else:\n        j = 1\n\n    x = 1.0 / (x + j)\n\nprint x + 1, math.e\n"}
{"ID":"48","language":"python","title":"Calculating PI using trigonometric iterations","content":"Calculating PI using trigonometric iterations\n\nimport math\n\nx = 1.0\ny = 1.0\nz = 1.0\nw = 1.0\nv = 1.0\nu = 1.0\n\nfor i in range(30):\n\n    x = math.sin(x) + x\n    y = math.cos(y) + y\n    z = math.cos(z) + math.sin(z) + z\n    w = math.cos(w) - math.sin(w) + w\n    v =  math.cos(v) * math.sin(v) + v\n    u =  math.cos(u) / math.sin(u) + u\n    \n    print i\n    print x, y * 2.0, z * 4.0 / 3.0, w * 4.0, v * 2.0, u * 2.0\n    print\n"}
{"ID":"49","language":"python","title":"Simple but Complex Calculator","content":"Simple but Complex Calculator\n\ndone = False\nwhile not done:\n\n    import cmath\n    import time\n    import math\n    import Audio_mac\n    print \"+--------------------------+\"\n    print \"|RAW_CALCULATOR 0.6 (BASIC)|\"\n    print \"|A)Addition                |\"\n    print \"|B)Subtraction             |\"\n    print \"|C)Multiplication          |\"\n    print \"|D)Division                |\"\n    print \"|E)Exponents               |\"\n    print \"|F)Square Root             |\"\n    print \"+--------------------------+\"\n    usr_choice = raw_input (\"&gt;&gt;\")\n    if usr_choice == \"A\" or usr_choice == \"a\":\n        print \"What is A?\"\n        a = input (\"&gt;&gt;\")\n        print \"What is B?\"\n        b = input (\"&gt;&gt;\")\n        print \"PROCESSING DATA\"\n        time.sleep(0.8)\n        c = a + b\n        print c\n    if usr_choice == \"B\" or usr_choice == \"b\":\n        print \"What is A?\"\n        a = input (\"&gt;&gt;\")\n        print \"What is B?\"\n        b = input (\"&gt;&gt;\")\n        print \"PROCESSING DATA...\"\n        time.sleep(0.8)\n        c = a - b\n        print c\n    if usr_choice == \"C\" or usr_choice == \"c\":\n        print \"What is A?\"\n        a = input (\"&gt;&gt;\")\n        print \"What is B?\"\n        b = input (\"&gt;&gt;\")\n        print \"PROCESSING DATA...\"\n        time.sleep(1.8)\n        c = a * b\n        print c\n    if usr_choice == \"D\" or usr_choice == \"d\":\n        print \"What is A?\"\n        a = input (\"&gt;&gt;\")\n        print \"What is B?\"\n        b = input (\"&gt;&gt;\")\n        print \"PROCESSING DATA...\"\n        time.sleep(1.8)\n        c = a/b\n        print c\n    if usr_choice == \"E\" or usr_choice == \"e\":\n        print \"What is A?\"\n        a = input (\"&gt;&gt;\")\n        print \"What is B?\"\n        b = input (\"&gt;&gt;\")\n        print \"PROCESSING DATA...\"\n        time.sleep(1.8)\n        c = a**b\n        print c\n    if usr_choice == \"F\" or usr_choice == \"f\":\n        print \"What is A?\"\n        a = input (\"&gt;&gt;\")\n        print \"PROCESSING DATA...\"\n        time.sleep(1.8)\n        c = math.sqrt(a)\n        print c\n    if usr_choice == \"42\":\n        print \"The answer to the universe life and everything!\"\n        time.sleep(1.8)\n        print \"BLOODY FORTY TWO!\"\n    print (\"Try Again? Y/N\")\ninput = raw_input(\"&gt;&gt;\")\nif input == \"N\" or input == \"n\":\n    done = True\n"}
{"ID":"50","language":"python","title":"Publish SQLite data to PDF using named tuples","content":"Publish SQLite data to PDF using named tuples\n\n# SQLiteToPDFWithNamedTuples.py\n# Author: Vasudev Ram - http://www.dancingbison.com\n# SQLiteToPDFWithNamedTuples.py is a program to demonstrate how to\n read \n# SQLite database data and convert it to PDF. It uses the Python\n# data structure called namedtuple from the collections module of \n# the Python standard library.\n\nfrom __future__ import print_function\nimport sys\nfrom collections import namedtuple\nimport sqlite3\nfrom PDFWriter import PDFWriter\n\n# Helper function to output a string to both screen and PDF.\ndef print_and_write(pw, strng):\n    print(strng)\n    pw.writeLine(strng)\n\ntry:\n\n    # Create the stocks database.\n    conn = sqlite3.connect('stocks.db')\n    # Get a cursor to it.\n    curs = conn.cursor()\n\n    # Create the stocks table.\n    curs.execute('''DROP TABLE IF EXISTS stocks''')\n    curs.execute('''CREATE TABLE stocks\n                 (date text, trans text, symbol text, qty real, price real)''')\n\n    # Insert a few rows of data into the stocks table.\ncurs.execute(\"INSERT INTO stocks VALUES ('2006-01-05', 'BUY', 'RHAT',\n 100, 25.1)\")\ncurs.execute(\"INSERT INTO stocks VALUES ('2007-02-06', 'SELL', 'ORCL',\n \n200, 35.2)\")\ncurs.execute(\"INSERT INTO stocks VALUES ('2008-03-07', 'HOLD', 'IBM',\n 300, 45.3)\")\n    conn.commit()\n\n    # Create a namedtuple to represent stock rows.\n    StockRecord = namedtuple('StockRecord', 'date, trans, symbol, qty,\n price')\n\n    # Run the query to get the stocks data.\n    curs.execute(\"SELECT date, trans, symbol, qty, price FROM stocks\")\n\n    # Create a PDFWriter and set some of its fields.\n    pw = PDFWriter(\"stocks.pdf\")\n    pw.setFont(\"Courier\", 12)\n    pw.setHeader(\"SQLite data to PDF with named tuples\")\n pw.setFooter(\"Generated by xtopdf -  \nhttps://bitbucket.org/vasudevram/xtopdf\")\n\n    # Write header info.\nhdr_flds = [ str(hdr_fld).rjust(10) + \" \" for hdr_fld in StockRecord._fields ]\n    hdr_fld_str = ''.join(hdr_flds)\n    print_and_write(pw, '=' * len(hdr_fld_str))\n    print_and_write(pw, hdr_fld_str)\n    print_and_write(pw, '-' * len(hdr_fld_str))\n\n    # Now loop over the fetched data and write it to PDF.\n    # Map the StockRecord namedtuple's _make class method\n    # (that creates a new instance) to all the rows fetched.\n    for stock in map(StockRecord._make, curs.fetchall()):\n        row = [ str(col).rjust(10) + \" \" for col in (stock.date, \\n        stock.trans, stock.symbol, stock.qty, stock.price) ]\n        # Above line can instead be written more simply as:\n        # row = [ str(col).rjust(10) + \" \" for col in stock ]\n        row_str = ''.join(row)\n        print_and_write(pw, row_str)\n\n    print_and_write(pw, '=' * len(hdr_fld_str))\n\nexcept Exception as e:\n    print(\"ERROR: Caught exception: \" + e.message)\n    sys.exit(1)\n\nfinally:\n    pw.close()\n    conn.close()\n"}
{"ID":"51","language":"python","title":"Check for package updates on PyPI","content":"Check for package updates on PyPI\n\nimport xmlrpc.client\nimport pip\n\npypi = xmlrpc.client.ServerProxy('http://pypi.python.org/pypi')\nfor dist in pip.get_installed_distributions():\n    available = pypi.package_releases(dist.project_name)\n    if not available:\n        # Try to capitalize pkg name\n        available = pypi.package_releases(dist.project_name.capitalize())\n     \n       if not available:\n        msg = 'no releases at pypi'\n    elif available[0] != dist.version:\n        msg = '{} available'.format(available[0])\n    else:\n        msg = 'up to date'\n    pkg_info = '{dist.project_name} {dist.version}'.format(dist=dist)\n    print('{pkg_info:40} {msg}'.format(pkg_info=pkg_info, msg=msg))\n"}
{"ID":"52","language":"python","title":"Opening files","content":"Opening files\n\n# indent your Python code to put into an email\nimport glob\n# glob supports Unix style pathname extensions\npython_files = glob.glob('*.py')\nfor file_name in sorted(python_files):\n    print '    ------' + file_name\n\n    with open(file_name) as f:\n        for line in f:\n            print '    ' + line.rstrip()\n\n    print\n"}
{"ID":"53","language":"python","title":"Prime Factorization","content":"Prime Factorization\n\ndef primo(n):\n    def z(x):\n        if x % i : return True\n        if x == i: return True\n        return False\n    nump =[2]+ range(3, n+1, 2) \n    for i in range(3, int((n**0.5)+1),2):\n         nump = filter(z, nump)\n    return nump\n\ndef mcm(n):\n    p=primo(n); mm=[]\n    while(n &gt; 1):\n        for i in p:\n            if (n%i == 0): mm.append(i); n=n/i\n    mm.sort()\n    return mm    \n            \nfor k in range(100,121):\n    print k,\" \",mcm(k)\n"}
{"ID":"54","language":"python","title":"Greatest common divisor","content":"Greatest common divisor\n\ndef mcd(a,b):\n    r=a\n    while (r):\n        r=a%b; a=b; b=r \n    return a   \n\nprint mcd(120,95)\n"}
{"ID":"55","language":"python","title":"Perfect Square Checker","content":"Perfect Square Checker\n\nimport math\n\nprint(\"Is your number a perfect square?! Find out now!\")\nprint(\"Or you can square a number!\")\n\n#Setting up while loop with loop-controlled variable\nx = 1\nwhile x &gt; 0:\n\n#Get input from user\n        op = input(\"q -&gt; quit program \n\" \\n                   \"c -&gt; checks a number \n\" \\n                   \"s -&gt; squares a number \n\")\n#Check if input is c, s, or q\n        if op[0] is \"c\":\n#If c, take the square root of the number and round it to the largest integer\n value less than or equal to x: math.floor(x)\n                num = input(\"Enter a whole number (q -&gt; quit): \")\n                sNum = math.floor(math.sqrt(int(num)))\n                numSquared = sNum * sNum\n                \n#If, else statement to determine if numSquared is equal to the input.\n                 if numSquared == int(num):\n                    print(num, \"IS a perfect square! \n\"\\n                            \"√(\"+ num + \") =\", math.sqrt(int(num)))\n                else:\n                    print(num, \"is NOT a perfect square! \n\" \\n                            \"√(\"+ num + \") =\", math.sqrt(int(num)))\n#If s, simply square user's input\n        if op[0] is \"s\":\n                num = int(input(\"Enter a number to square (q -&gt; quit): \"))\n                numSquared = num ** 2\n                print(num, \"squared is\", numSquared)\n\n#If q, quit program with goodbye message\n        else:\n                if op[0] is 'q':\n                        x -= 1\n                        print(\"Goodbye!\")\n                else:\n                        print(\"Must enter either c, s, or q\")\n"}
{"ID":"56","language":"python","title":"division digit-by digit calculation","content":"division digit-by digit calculation\n\ndef div(a,b,t):\n      \n    a1=str(a)\n    if  \".\" in  a1:\n        d1, d2 =a1.split(\".\")\n        d2=d2.ljust(t,\"0\")   \n     else:\n        d1=a1\n        d2=\"0\"*t\n           \n    c=[];r1=0\n    for i in d1:\n            d11=int(str(r1)+i)\n            c1=d11/b\n            r1=d11%b\n            c.append(c1);\n    \n    c.append(\".\") \n       for i in d2:\n            d11=int(str(r1)+i)\n            c1=d11/b\n            r1=d11%b\n            c.append(c1);\n    \n    c = \"\".join(map(str, c))\n    while c[0] ==\"0\": c =c[1:]\n    if c[0]==\".\": c =\"0\"+c \n       \n    return c \n\nprint div(15,23,150)\n"}
{"ID":"57","language":"python","title":"First n primes numbers","content":"First n primes numbers\n\ndef prime(n):\n    def z(x):\n        if x :return True\n        return False\n    num1=range(0,n+1); num2=int(n**0.5) +1\n    for k in range(2,num2):\n        num0=range(k,n+1,k);del num0[0]\n          for i in num0:\n            num1[i]=0\n    return filter(z, num1)\n\nprint prime(102)\n"}
{"ID":"58","language":"python","title":"Convert Excel to PDF with xlwings and xtopdf","content":"Convert Excel to PDF with xlwings and xtopdf \n\nimport sys\nfrom xlwings import Workbook, Sheet, Range, Chart\nfrom PDFWriter import PDFWriter\n\n# Create a connection with a new workbook.\nwb = Workbook()\n\n# Create the Excel data.\n# Column 1.\nRange('A1').value = 'Foo 1'\nRange('A2').value = 'Foo 2'\nRange('A3').value = 'Foo 3'\n# Column 2.\nRange('B1').value = 'Bar 1'\nRange('B2').value = 'Bar 2'\nRange('B3').value = 'Bar 3'\n\npw = PDFWriter(\"xlwingsTo.pdf\")\npw.setFont(\"Courier\", 10)\npw.setHeader(\"Testing Excel conversion to PDF with xlwings and xtopdf\")\npw.setFooter(\"xlwings: http://xlwings.org --- xtopdf:\n http://slid.es/vasudevram/xtopdf\")\n\nfor row in Range('A1..B3').value:\n    s = ''\n    for col in row:\n        s += col + ' | '\n    pw.writeLine(s)\n\npw.close()\n"}
{"ID":"59","language":"python","title":"Split a domain with urlparse","content":"Split a domain with urlparse\n\nimport urlparse\nurl = \"http://python.org\"\ndomain = urlparse.urlsplit(url)[1].split(':')[0]\nprint \"The domain name of the url is: \", domain\n"}
{"ID":"60","language":"python","title":"Using Telnet in Python","content":"Using Telnet in Python\n\nimport getpass\nimport sys\nimport telnetlib\n\nHOST = \"hostname\"\n\nuser = raw_input(\"Enter your remote account: \")\n\npassword = getpass.getpass()\n\ntn = telnetlib.Telnet(HOST)\n\ntn.read_until(\"login: \")\n\ntn.write(user + \"\n\")\n\nif password:\n    tn.read_until(\"Password: \")\n    tn.write(password + \"\n\")\n\ntn.write(\"ls\n\")\n\ntn.write(\"exit\n\")\n\nprint tn.read_all()\n"}
{"ID":"61","language":"python","title":"Monitor Apache / Nginx Log File","content":"Monitor Apache / Nginx Log File\n\nips = {}\n\nfh = open(\"/var/log/nginx/access.log\", \"r\").readlines()\nfor line in fh:\n    ip = line.split(\" \")[0]\n    if 6 &lt; len(ip) &lt;=15:\n        ips[ip] = ips.get(ip, 0) + 1\nprint ips\n"}
{"ID":"62","language":"python","title":"Password Generator","content":"Password Generator\n\nimport string\nfrom random import *\ncharacters = string.ascii_letters + string.punctuation  + string.digits\npassword =  \"\".join(choice(characters) for x in range(randint(8, 16)))\nprint password\n"}
{"ID":"63","language":"python","title":"Apache logfile","content":"Apache logfile\n\nimport collections\n\nlogfile = open(\"yourlogfile.log\", \"r\")\n\nclean_log=[]\n\nfor line in logfile:\n    try:\n        # copy the URLS to an empty list.\n        # We get the part between GET and HTTP\n        clean_log.append(line[line.index(\"GET\")+4:line.index(\"HTTP\")])\n    except:\n        pass\nncounter = collections.Counter(clean_log)\n\n# get the Top 50 most popular URLs\nfor count in counter.most_common(50):\n    print(str(count[1]) + \"\t\" + str(count[0]))\n\nlogfile.close()\n"}
{"ID":"64","language":"python","title":"Log Checker","content":"Log Checker\n\nlogfile = open(\"/var/log/syslog\", \"r\")\nfor line in logfile:\n    line_split = line.split()\n    print line_split\n    list = line_split[0], line_split[1], line_split[2], line_split[4]\n    print list\n"}
{"ID":"65","language":"python","title":">Guess The Number<","content":"Guess The Number\n\n# This is a guess the number game.\nimport random\nguessesTaken = 0\nprint('Hello! What is your name?')\nmyName = input()\nnumber = random.randint(1, 20)\nprint('Well, ' + myName + ', I am thinking of a number between 1 and 20.')\nwhile guessesTaken &lt; 6:\n    print('Take a guess.') # There are four spaces in front of print.\n    guess = input()\n    guess = int(guess)\n    guessesTaken = guessesTaken + 1\n    if guess &lt; number:\n        print('Your guess is too low.') # There are eight spaces in front of\n print.\n    if guess &gt; number:\n        print('Your guess is too high.')\n    if guess == number:\n        break\nif guess == number:\n    guessesTaken = str(guessesTaken)\n    print('Good job, ' + myName + '! You guessed my number in ' +\n guessesTaken + ' guesses!')\nif guess != number:\n    number = str(number)\n    print('Nope. The number I was thinking of was ' + number)\n"}
{"ID":"66","language":"python","title":">Get the username from a prompt<","content":"Get the username from a prompt\n\n#get the username from a prompt\nusername = raw_input(\"Login: &gt;&gt; \")\n\n#list of allowed users\nuser1 = \"Jack\"\nuser2 = \"Jill\"\n\n#control that the user belongs to the list of allowed users\nif username == user1:\n    print \"Access granted\"\nelif username == user2:\n    print \"Welcome to the system\"\nelse:\n    print \"Access denied\"\n"}
{"ID":"67","language":"python","title":">Get the Geo Location of an IP Address<","content":"Get the Geo Location of an IP Address   import re   import sys   import urllib2   import BeautifulSoup    usage = \"Run the script: ./geolocate.py IPAddress\"     if len(sys.argv)!=2:     print(usage)     sys.exit(0)     if len(sys.argv) &gt; 1:     ipaddr = sys.argv[1]     geody = \"http://www.geody.com/geoip.php?ip=\" + ipaddr    html_page = urllib2.urlopen(geody).read()    soup = BeautifulSoup.BeautifulSoup(html_page)  # Filter paragraph containing geolocation info.     paragraph = soup('p')[3]   # Remove html tags using regex.     geo_txt = re.sub(r'&lt;.*?&gt;', '', str(paragraph))     print geo_txt[32:].strip()"}
{"ID":"68","language":"python","title":">Backup all MySQL databases, one in each file with a timestamp<","content":"Backup all MySQL databases, one in each file with a timestamp\n\n#Importing the modules\nimport os\nimport ConfigParser\nimport time\n\n# On Debian, /etc/mysql/debian.cnf contains 'root' a like login and\n password.\nconfig = ConfigParser.ConfigParser()\nconfig.read(\"/etc/mysql/debian.cnf\")\nusername = config.get('client', 'user')\npassword = config.get('client', 'password')\nhostname = config.get('client', 'host')\nfilestamp = time.strftime('%Y-%m-%d')\n\n# Get a list of databases with :\ndatabase_list_command=\"mysql -u %s -p%s -h %s --silent -N -e 'show\n databases'\" % (username, password, hostname)\nfor database in os.popen(database_list_command).readlines():\n    database = database.strip()\n    if database == 'information_schema':\n        continue\n    if database == 'performance_schema':\n        continue\n    filename = \"/backups/mysql/%s-%s.sql\" % (database, filestamp)\n os.popen(\"mysqldump --single-transaction -u %s -p%s -h %s -d %s | \ngzip -c &gt; %s.gz\" % (username, password, hostname, database, filename))\n"}
{"ID":"69","language":"python","title":">YouTube API to get data<","content":"YouTube API to get data  # Import the modules    import requests    import json  # Make it a bit prettier..    print \"-\" * 30    print \"This will show the Most Popular Videos on YouTube\"    print \"-\" * 30  # Get the feed r =\n requests.get(\"http://gdata.youtube.com/feeds/api/standardfeeds/top_rated?     \nv=2&amp;alt=jsonc\")     r.text   # Convert it to a Python dictionary     data = json.loads(r.text)  # Loop through the result.     for item in data['data']['items']:    print \"Video Title: %s\" % (item['title'])    print \"Video Category: %s\" % (item['category'])    print \"Video ID: %s\" % (item['id'])    print \"Video Rating: %f\" % (item['rating'])    print \"Embed URL: %s\" % (item['player']['default'])    print"}
{"ID":"70","language":"python","title":">Convert KM/H to MPH<","content":"Convert KM/H to MPH  #!/usr/bin/env python    kmh = int(raw_input(\"Enter km/h: \"))    mph =  0.6214 * kmh    print \"Speed:\", kmh, \"KM/H = \", mph, \"MPH\""}
{"ID":"71","language":"python","title":">Get all the links from a website<","content":"Get all the links from a website   import urllib2   import re  #connect to a URL    website = urllib2.urlopen(url)  #read html code    html = website.read()  #use re.findall to get all the links    links = re.findall('\"((http|ftp)s?://.*?)\"', html)  print links"}
{"ID":"72","language":"python","title":">Celsius and Fahrenheit Converter<","content":"Celsius and Fahrenheit Converter   Fahrenheit to Celsius formula:    (*F - 32) x 5/9 = *C or in plain english, First subtract 32, then multiply by 5,    then divide by 9.   Celsius to Fahrenheit formula:    (*C x 9/5) + 32 = *F or in plain English, Multiple by 9, then divide by 5, then    add 32.   Convert Fahrenheit to Celsius   #!/usr/bin/env python   Fahrenheit = int(raw_input(\"Enter a temperature in Fahrenheit: \"))   Celsius = (Fahrenheit - 32) * 5.0/9.0   print \"Temperature:\", Fahrenheit, \"Fahrenheit = \", Celsius, \" C\"   Convert Celsius to Fahrenheit   #!/usr/bin/env python   Celsius = int(raw_input(\"Enter a temperature in Celsius: \"))   Fahrenheit = 9.0/5.0 * Celsius + 32   print \"Temperature:\", Celsius, \"Celsius = \", Fahrenheit, \" F\""}
{"ID":"73","language":"python","title":">Calculate the average score<","content":"Calculate the average score\n\n# Get three test score\nround1 = int(raw_input(\"Enter score for round 1: \"))\n\nround2 = int(raw_input(\"Enter score for round 2: \"))\n\nround3 = int(raw_input(\"Enter score for round 3: \"))\n\n# Calculate the average\naverage = (round1 + round2 + round3) / 3\n\n# Print out the test score\nprint \"the average score is: \", average \n"}
{"ID":"74","language":"python","title":">Command Line IMDB Scraper<","content":"Command Line IMDB Scraper\n\n#Importing the modules\nfrom BeautifulSoup import BeautifulSoup\nimport sys\nimport urllib2\nimport re\nimport json\n\n#Ask for movie title\ntitle = raw_input(\"Please enter a movie title: \")\n\n#Ask for which year\nyear = raw_input(\"which year? \")\n\n#Search for spaces in the title string\nraw_string = re.compile(r' ')\n\n#Replace spaces with a plus sign\nsearchstring = raw_string.sub('+', title)\n\n#Prints the search string\nprint searchstring\n\n#The actual query\nurl = \"http://www.imdbapi.com/?t=\" + searchstring + \"&amp;y=\"+year\n\nrequest = urllib2.Request(url)\n\nresponse = json.load(urllib2.urlopen(request))\n\nprint json.dumps(response,indent=2)\n\n"}
{"ID":"75","language":"python","title":">Bitly Shortener<","content":"Bitly Shortener\n\n# Import the modules\n\nimport bitlyapi\nimport sys\n\n# Define your API information\n\nAPI_USER = \"your_api_username\"\nAPI_KEY = \"your_api_key\"\n\nb = bitlyapi.BitLy(API_USER, API_KEY)\n\n# Define how to use the program\n\nusage = \"\"\"Usage: python shortener.py [url]\ne.g python shortener.py http://www.google.com\"\"\"\n\nif len(sys.argv) != 2:\n    print usage\n    sys.exit(0)\n\nlongurl = sys.argv[1]\n\nresponse = b.shorten(longUrl=longurl)\n\nprint response['url']\n"}
{"ID":"76","language":"python","title":">Google Command Line Script<","content":"Google Command Line Script\n\nimport urllib2\nimport urllib\nimport json\n\nurl = \"http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;\"\n\nquery = raw_input(\"What do you want to search for ? &gt;&gt; \")\n\nquery = urllib.urlencode( {'q' : query } )\n\nresponse = urllib2.urlopen (url + query ).read()\n\ndata = json.loads ( response )\n\nresults = data [ 'responseData' ] [ 'results' ]\n\nfor result in results:\n    title = result['title']\n    url = result['url']\n    print ( title + '; ' + url )\n"}
{"ID":"77","language":"python","title":">Port scanner in Python<","content":"Port scanner in Python   import socket   import subprocess   import sys   from datetime import datetime # Clear the screen   subprocess.call('clear', shell=True) # Ask for input   remoteServer    = raw_input(\"Enter a remote host to scan: \")   remoteServerIP  = socket.gethostbyname(remoteServer) # Print a nice banner with information on which host we are about to scan   print \"-\" * 60   print \"Please wait, scanning remote host\", remoteServerIP   print \"-\" * 60 # Check what time the scan started   t1 = datetime.now() # Using the range function to specify ports (here it will scans all   ports\nbetween 1 and 1024) # also put in some error handling for catching errors  try:    for port in range(1,1025):          sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        result = sock.connect_ex((remoteServerIP, port))        if result == 0:            print \"Port {}: \t Open\".format(port)        sock.close() except KeyboardInterrupt:    print \"You pressed Ctrl+C\"    sys.exit() except socket.gaierror:    print 'Hostname could not be resolved. Exiting'    sys.exit()except socket.error:    print \"Couldn't connect to server\"    sys.exit() # Checking the time again   t2 = datetime.now() # Calculates the difference of time, to see how long it took to run the script   total =  t2 - t1 # Printing the information to screen print 'Scanning Completed in: ', total"}
{"ID":"78","language":"python","title":">Date and Time Script<","content":"Date and Time Script   import datetime   now = datetime.datetime.now()   print \"-\" * 25   print now   print now.year   print now.month   print now.day   print now.hour   print now.minute   print now.second   print \"-\" * 25   print \"1 week ago was it: \", now - datetime.timedelta(weeks=1)   print \"100 days ago was: \", now - datetime.timedelta(days=100)   print \"1 week from now is it: \",  now + datetime.timedelta(weeks=1)   print \"In 1000 days from now is it: \", now + datetime.timedelta(days=1000)   print \"-\" * 25   birthday = datetime.datetime(2012,11,04)   print \"Birthday in ... \", birthday - now   print \"-\" * 25"}
{"ID":"79","language":"python","title":">Check your IP Address<","content":"Check your IP Address   import urllib   import re   print \"we will try to open this url, in order to get IP Address\"   url = \"http://checkip.dyndns.org\"   print url   request = urllib.urlopen(url).read()   theIP = re.findall(r\"\d{1,3}\.\d{1,3}\.\d{1,3}.\d{1,3}\", request)   print \"your IP Address is: \",  theIP"}